use crate::ast::*;
use crate::lexer::{Token, LexerError};
use lexgen_util::Loc;

grammar<'input>;

pub Program: Program = {
  <l:@L> <declares:(<VariableDeclaration>)*> <r:@R> => Program { range: Range(l, r), body: declares },
}

CommaDelimited<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
}

VariableDeclaration: VariableDeclaration = {
  <l:@L> <kind:VariableDeclarationKind> <declarations:CommaDelimited<VariableDeclarator>> <r:@R> ";"? => VariableDeclaration { kind, range: Range(l, r), declarations },
}

VariableDeclarationKind: VariableDeclarationKind = {
  "var" => VariableDeclarationKind::Var,
  "let" => VariableDeclarationKind::Let,
  "const" => VariableDeclarationKind::Const,
}

VariableDeclarator: VariableDeclarator = {
  <l:@L> <id:Identifier> "=" <init:VariableDeclaratorInit> <r:@R> => VariableDeclarator { range: Range(l, r), id, init }
}

VariableDeclaratorInit: VariableDeclaratorInit = {
  <l:@L> <s:string> <r:@R> => VariableDeclaratorInit::Literal(Literal { range: Range(l, r), value: JsValue::String(s.into()) }),
  <l:@L> <n:number> <r:@R> => VariableDeclaratorInit::Literal(Literal { range: Range(l, r), value: JsValue::Number(n.into()) })
}

Identifier: Identifier = {
  <l:@L> <id:identifier> <r:@R> => Identifier { range: Range(l, r), name: id.into() }
}

extern {
  type Location = Loc;
  type Error = LexerError;

  enum Token<'input> {
    identifier => Token::Identifier(<&'input str>),
    string => Token::StringLiteral(<&'input str>),
    number => Token::Number(f64),
    "var" => Token::Var,
    "let" => Token::Let,
    "const" => Token::Const,
    "function" => Token::Function,
    "(" => Token::LeftParen,
    ")" => Token::RightParen,
    "{" => Token::LeftCurlyBrace,
    "}" => Token::RightCurlyBrace,
    "=" => Token::Assign,
    ";" => Token::Semicolon,
    "." => Token::Dot,
    "," => Token::Comma,
  }
}
